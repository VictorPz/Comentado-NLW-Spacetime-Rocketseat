Fluxo:
- Nosso front vai solicitar o login no github
- Este login voltará um código que poderá ser convertido num acesstoken (token de acesso aos dados como imagem, nome do perfil etc)
- O front joga esse código pro back que converte em um acess token confirmando com o git se é um usuário
- back salva informações no db

Front-end:

Criar um oauth app no github:
- Criamos o app Spacetime (DEV) de início, passando a url http://localhosto:3000 e url de auth http://localhosto:3000/api/auth/callback
- forma do next criar as variáveis de ambiente (.env.local)

- dentro do front criamos: GITHUB_CLIENT_ID=2599c91207bf7255f175
- no env do back criamos: GITHUB_CLIENT_ID=2599c91207bf7255f175 e GITHUB_CLIENT_SECRET="3901f8657e72170e17de2fe67829185280fe5632"

- O next tem a peculiaridade de toda variavel ambiente que vai ser exposta ao app ter NEXT_PUBLIC de prefixo então alteramos no env do front

Obtendo o github code:
- Em nossa page, substituimos a href da parte de singup por {`https://github.com/login/oauth/authorize?client_id=${process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID}`}
- Feito isto, já volta na nossa url de callback (http://localhosto:3000/api/auth/callback) o code que precisamos callback/code=xxxxxxx

Back-end:
- Para o backend ler as dependências do env, precisamos instalar um pacote chamado dotenv
- npm i dotenv -D
- Criar no server.ts o import 'dotenv/config'
- Criar na pasta routes a auth.ts
- Faço a mesma config da memories e crio a unica rota de autenticação que teremos bem parecido com as rotas do crud porém validando o code que esperamos com z.object
- instalamos o axios (para fazer requisições http apesar de já estar disponível a fetch no node)
- npm i axios

- Fazemos a requisição para transformar o code fornecido para acess token e o acess token em dados do usuário.
- Fazemos uma verificação dos dados com o zobject
- Conferimos se precisa salvar esse usuario no db ou se ele ja existe
- Criamos o Jason web token

JWT:
- É um token gerado do back para o frontend para decidir/permitir que o usuario fique logado por x periodod de tempo
- Iniciamos instalando o npm i @fastify/jwt
- Importamos ele no server
- Registramos ele no server como fizemos com o cors
- passamos um secret para ele (no video definido como 'spacetime') mas deve ser uma string unica pois ela assina o jwt e difere de outras aplicações

- Voltamos no nosso auth para criar o jwt token

Criando rotas que dependem de autenticação:
- Começamos com await request.jwtVerify() em nossas rotas que queremos verificar se existe/precisa de um jwt válido (passamos request no async da rota)
- Precisamos depois criar um auth.d.ts para dizer ao typescript o que tem no jwt, pois ele não sabe o que esperar.
- Logo após corrigimos nossa rota para retornar apenas ONDE o id for igual ao sub que é o id no jwt:
          where: {
            id: request.user.sub
        },
- Como precisamos fazer isso no momento para todas as nossas requests, ao invés de fazer de uma a uma faremos o seguinte:
- Vamos no app, criamos um app.addHook('preHandler', async (request) => {await request.jwtVerify()})

De volta ao front-end:
- Salvando o jwt token nos cookies:
- O Next nos permite criar rotas assim como no back não necessáriamente visíveis ao usuário.
- Criamos então primeiramente, para lidar com nossa autenticação (o code que vem do git) uma sequência de pastas como no link de resposta para lidar com a routes
- Criamos: api, auth e callback. Dentro de callback criamos o route.ts
- O ato de redirecionar o usuário / acessar uma url sempre é get

- Dentro da nossa route.ts, fazemos uma export async function GET(request: NextRequest) e já temos acesso a pagina que retorna nosso code do git
- Dentro desta function get, pegamos o code:
  const { searchParams } = new URL(request.url) // Esse searchParams já nos mostra todos os parâmetros da url incluindo o code que precisamos
  const code = searchParams.get('code')
- Próximo passo é enviar esse code para o backend
- Para isso começamos instalando o axios (npm i axios)
- Dentro da pasta source criamos a pasta lib e dentro dela o api.ts que define o caminho padrão para o nosso backend:
  import axios from 'axios'
  export const api = axios.create({
    baseURL: 'http://localhost:3333',
  })
- Feito isto, voltamos no route.ts e criamos o registerResponse que retornará nosso token:
    const registerResponse = await api.post('/register', {
      code,
    })
- Como podemos notar o register response faz uma requisição no register do back end passando o code.
- Depois armazenamos nosso token que volta na data do register response:
  const { token } = registerResponse.data
- Redirecionamos o usuário para a home page e salvamos o token nos cookies:
  const redirectURL = new URL('/', request.url)

  return NextResponse.redirect(redirectURL, {
    headers: {
      'Set-Cookie': `token=${token}; Path=/;`,
    },
  })

- Voltamos na pages(pagina principal) e importamos os cookies lá para utilizar:
  import { cookies } from 'next/headers'
- Com eles importados podemos verificar se o usuário está autenticado com o método .has dos cookies que verifica a existência de um cookie x:
  const isAuthenticated = cookies().has('token')
- Sabendo se o usuário está ou não autenticado, podemos trocar o componente que é exibido com if ternário e definir nossas exibições ex:
  {isAuthenticated ? <Profile /> : <Sigin />}
- Dentro da nossa nova view ( Profile ) precisamos acessar os dados do usuário que estão no token, para isso:

- Usamos uma lib chamada jwt-decode (npm i jwt-decode)
- Criamos na lib um authUser.ts para fazer a autenticação dos usuarios e a conversão do jwt em dados com uma função getUser

- Agora sim dentro de profile fazemos uma const { name, avatarUrl } = getUser()
- Antes de tentarmos carregar uma imagem com o next, precisamos ir no next.config e falar de quais domínios aceitamos imagens:
  const nextConfig = {
    images: {
      domains: ['avatars.githubusercontent.com'],
    },
  }
- Logo após isto é só utilizar

Mobile:
- Para ajudar na autenticação no mobile usaremos o expo auth session.
- npx expo install expo-auth-session expo-crypto
- Logo após vamos em nosso app.json e cadastramos um "scheme": "nlwspacetimevkpz"
- Criamos uma nova aplicação no github oatuh, dessa vez para mobile.
- A url de callback para testar em simulador ou celular tem que ser a definida na documentação https://docs.expo.dev/guides/authentication/#github (exp://localhost:19000/--/*)
- Seguindo a doc do  precisamos de colar um código na app.tsx (marcado com /*Doccode*/)

- Deu um errinho na url da documentação, pegamos a correta fazendo dentro de useEffect():
      console.log(
      makeRedirectUri({
        scheme: 'nlwspacetimevkpz',
      }),
    )
  - Precisamos pegar a url que vem nesse console.log, substituir na aplicação do git sem o final /--*
  - Neste ponto pegamos o code e vamos precisar do axios para chamar o backend e converter o code em token (mesma coisa da web)
  - npm i axios
  - Criamos a lib/api.ts dentro de source:
    export const api = axios.create({
      baseURL: 'http:// 192.168.1.103:3333'})
  - Para funcionar o ipv4 no mobile precisamos la no backend onde está port:3333 passar host: '0.0.0.0'
  - Precisamos também alterar a env do backend para a do mobile (mesma coisa da web porem quando estiver usando web comentar a do mobile e quando estiver usando mobile comentar a da web)
  - Feito isto ja estamos recebendo nosso jwt, precisamos salva, no caso do mobile no secure store

Salvando token no secure store:
  - Começamos instalando o expo secure store
  - npx expo install expo-secure-store
  - Seguimos as configs da doc:
  (https://docs.expo.dev/versions/latest/sdk/securestore/?utm_source=google&utm_medium=cpc&utm_content=performancemax&gclid=CjwKCAjw36GjBhAkEiwAKwIWydVC-_Va24dUygzHufsAg1nNg2-zu1B6O6zlF9cdDNFzldEQ6QmYhhoCdREQAvD_BwE)
  - Importamos o secure store conforme a doc:
    import * as SecureStore from 'expo-secure-store';
  - Pegamos a function save da documentação para o código (essa função vai salvar nosso token recebendo uma chave, valor)
  - SecureStore.setItemAsync('token', token)

Organizando as navegações do android (Expo router):
- doc: https://expo.github.io/router/docs/
- npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar
- Permite fazer o mesmo esquema de rotas do next.js na web
- Vamos no package.json e trocamos a linha do main para a da doc: "main": "index.js"
- Criamos um index.js na raiz e importamos: import "expo-router/entry";
- Dentro do package.json como estamos usando npm 8.3+ colocamos em baixo das dependencias:
    "overrides": {
    "metro": "0.76.0",
    "metro-resolver": "0.76.0"
  },
- Vamos no babel e adicionamos o plugin da doc: require.resolve("expo-router/babel")
- Criamos nossa pasta app como no front web no mobile
- Criamos nosso index.tsx e movemos todo nosso app.tsx la pra dentro
- Apagamos o app.tsx

- Nessa parte deu um erro e a tela ficou toda branca, foi um erro do nativewind. Solução: https://github.com/marklawlor/nativewind/issues/419

- Tudo estando devidamente solucionado, a pagina está aparecendo corretamente
- Criamos então a autenticação da api dentro da func handleGithubOAuthCode e criamos o const router = useRouter() para depois de autenticar poder fazer um router.push('./memories')
- Sendo assim o usuário autenticado para na parte de memórias